xyvar <- xmean - y
p1 <- xyvar %*% xcovin
result <- round(p1%*%(n*xyvar),3)
fstat <- qf(f, df1 = ncol(x), df2 = nrow(x)-ncol(x)) * (((nrow(x)-1)*ncol(x))/(nrow(x) - ncol(x)))
if(result > fstat){
print("We REJECT the Null Hypothesis that y is a possible mean vector in x")
}else{
print("We ACCEPT the Null Hypothesis and y is a possible mean vector in x")
}
r_list <- list("Tsquared" = result, "Fstat" = fstat)
return(r_list)
}
meanVector <- c(4,50,10)
a <- tsqared(tbl, meanVector, 0.9)
a$Tsquared
a$Fstat
(1 + (a$Tsquared)/(nrow(tbl) - 1))^-1
mmEllipsoid <- function(x, f){
# This function will find those two lines inside the ellipsoid figure
# see the pic on page 223
e <- eigen(cov(x))
eValues <- e$values
eVector <- e$vectors
eVector <- t(eVector)
fstat <- sqrt(qf(f, df1 = ncol(x), df2 = nrow(x)-ncol(x)) * (((nrow(x)-1)*ncol(x))/(nrow(x) - ncol(x))))
results <- rep(0, length(eValues))
for (i in 1:length(eValues)){
results[i] <- fstat * sqrt(eValues[i])
}
return(results)
}
mmEllipsoid(tbl, f = .95)
dmv <- dmvnorm(df, mean = meanVector, sigma = diag(ncol(cov(tbl))))
dmv
data("T1-6")
#Renaming
colnames(tbl) <- c("Age", "V2", "V3", "V4", "V5","target")
tbl$target <- as.factor(tbl$target)
# Non-multiple-sclerosis (NMS) group data
nms <- subset(tbl, target == 0)
# Multiple-sclerosis (MS) group data
ms <- subset(tbl, target == 1)
nmsScaled <- data.frame(scale(nms[1:5], scale = TRUE))
msScaled <- data.frame(scale(ms[1:5], scale = TRUE))
nmsSmean <- colMeans(nms[1:5])
msSmean <- colMeans(ms[1:5])
v2nmsLog <- log(nms$V2)
v2nmsLog <- log(nms$V2)
shapiro.test(v2nmsLog)
v2nmsBox <- boxcox(nms$V2)
plot(density(v2nmsLog))
lines(density(nmsScaled$V2))
plot(v2nmsLog)
m <- 3
s <- diag(3)
s[2,1] <- 3/5
s[3,1] <- 1/3
s[3,2] <- 11/15
pmvnorm(mean = rep(0.007, m), s, lower = rep(-Inf, m), upper = c(1,4,2))
shapiro.test(nms[,4])
library(psych)
df <- tbl[2:5]
pcamodel <- principal(df, nfactors = 2, rotate = "varimax")
pcamodel
pcamodel
library(nFactors)
ev <- eigen(cor(df)) # get eigenvalues
ap <- parallel(subject=nrow(df),var=ncol(df),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
library(psych)
df <- tbl[2:5]
pcamodel <- principal(df, nfactors = 2, rotate = "varimax")
pcamodel
pcamodel <- principal(df, nfactors = 4, rotate = "varimax")
pcamodel
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
knitr::opts_chunk$set(echo = TRUE)
library(st514)
library(tidyverse)
descriptive(nms)
descriptive(nms$V2)
# print(xcovVar)
# print("-----------------------------------------------------")
# print("Variance")
# print(xvar)
# print("-----------------------------------------------------")
# print("Covariance inverse")
# print(xcovInv)
# print("-----------------------------------------------------")
# print("Determinant")
# print(xdet)
mylist = list("meanVector" = xmean, "Covariance" = xcov, "Co-Variance" = xcovVar, "Variance" = xvar, "CovInverse" = xcovInv, "Determinant" = xdet)
descriptive <- function(x){
"
This function takes in one input parameter
and that is a dataframe or matrix
The output of this function will be
1. Mean for each column in the dataset
2. Covariance matrix
3. Co/Variance Matrix
4. Variance matrix
5. Inverse of the covariance matrix
6. Determinant of the covariance matrix
"
xmean <- colMeans(x)
xcov <- cov(x)
xcovVar <- cov(x) * (nrow(x) -1) / nrow(x)
xvar <- var(x)
xcovInv <- solve(xcov)
xdet <- det(xcov)
# Debug block
# print("Mean Vector")
# print(xmean)
# print("-----------------------------------------------------")
# print("Covariance")
# print(xcov)
# print("-----------------------------------------------------")
# print("Xco/Variance")
# print(xcovVar)
# print("-----------------------------------------------------")
# print("Variance")
# print(xvar)
# print("-----------------------------------------------------")
# print("Covariance inverse")
# print(xcovInv)
# print("-----------------------------------------------------")
# print("Determinant")
# print(xdet)
mylist = list("meanVector" = xmean, "Covariance" = xcov, "Co-Variance" = xcovVar, "Variance" = xvar, "CovInverse" = xcovInv, "Determinant" = xdet)
return(mylist)
}
descriptive(nms$V2)
descriptive(nms$V2)
descriptive(nms)
descriptive(nms[2:5])
descriptive(nms[2:5])
tsqared <- function(x,y,f){
n <- nrow(x)
xmean <- colMeans(x)
xcov <- cov(x)
xcovin <- solve(xcov)
xyvar <- xmean - y
p1 <- xyvar %*% xcovin
result <- round(p1%*%(n*xyvar),3)
fstat <- qf(f, df1 = ncol(x), df2 = nrow(x)-ncol(x))
if(result > fstat){
print("We REJECT the Null Hypothesis that y is a possible mean vector in x")
}else{
print("We ACCEPT the Null Hypothesis and y is a possible mean vector in x")
}
return(c(result, fstat))
}
nmsM <- colMeans(nms[1:5])
msM <- colMeans(ms[1:5])
print("For the MS dataset using the Non-MS mean-vector")
print(tsqared(x=ms[1:5], y=nmsM, f=0.9))
print("For the Non-MS dataset using the MS mean-vector")
print(tsqared(x = nms[1:5], y = msM, f = 0.9))
library(MASS)
library(rcompanion)
box <- boxcox(nms$V2 ~1, lambda = seq(-6,6,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$Box.y))]
Cox2 <- Cox[with(Cox, order(Cox$Box.y))]
box <- boxcox(nms$V2 ~1, lambda = seq(-6,6,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(Cox$Box.y))]
box <- boxcox(nms$V2 ~1, lambda = seq(-6,6,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(Cox$Box.y)),]
box <- boxcox(nms$V2 ~1, lambda = seq(-6,6,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"Box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
Cox2[1,]
lambda = Cox2[1,"Box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
df_box
Cox2[1,]
lambda = Cox2[1,box.x]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
shapiro.test(df_box)
plotNormalHistogram(df_box)
shapiro.test(df_box)
box <- boxcox(nms$V2 ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
shapiro.test(df_box)
box <- boxcox(nms$V2 ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
shapiro.test(df_box)
nBoxCoc <- function(x){
# Takes a vector and returns a BoxCox transformed
# data Frame for that variable
######### REQUIRES rcompanion ###################
box <- boxcox(x ~ 1, lambda = seq(-20, 20, 0.1))
cox <- data.frame(box.x, box.y)
cox2 <- cox[with(cox, order(-cox$box.y)),]
lambda <- cox2[1,"box.x"]
df_box <- (x ^ lambda - 1) / lambda
nPlot <- plotNormalHistogram(df_box)
nShapiroResults <- shapiro.test(df_box)
nList <- list("Plot" = nPlot, "Shapiro Wilk Test" = nShapiroResults)
return(nList)
}
nBoxCoc(ms$v2)
nBoxCoc <- function(x){
# Takes a vector and returns a BoxCox transformed
# data Frame for that variable
######### REQUIRES rcompanion ###################
box <- boxcox(x ~ 1, lambda = seq(-20, 20, 0.1))
cox <- data.frame(box.x, box.y)
cox2 <- cox[with(cox, order(-cox$box.y)),]
lambda <- cox2[1,"box.x"]
df_box <- (x ^ lambda - 1) / lambda
nPlot <- plotNormalHistogram(df_box)
nShapiroResults <- shapiro.test(df_box)
nList <- list("Plot" = nPlot, "Shapiro Wilk Test" = nShapiroResults)
return(nList)
}
nBoxCoc(ms$v2)
######### REQUIRES rcompanion ###################
box <- boxcox(x ~ 1, lambda = seq(-20, 20, 0.1))
nBoxCoc <- function(x){
# Takes a vector and returns a BoxCox transformed
# data Frame for that variable
######### REQUIRES rcompanion ###################
box <- boxcox(x ~ 1, lambda = seq(-20, 20, 0.1))
cox <- data.frame(box.x, box.y)
cox2 <- cox[with(cox, order(-cox$box.y)),]
lambda <- cox2[1,"box.x"]
df_box <- (x ^ lambda - 1) / lambda
nPlot <- plotNormalHistogram(df_box)
nShapiroResults <- shapiro.test(df_box)
nList <- list("Plot" = nPlot, "Shapiro Wilk Test" = nShapiroResults)
return(nList)
}
nBoxCoc(ms$v2)
nBoxCoc <- function(x){
# Takes a vector and returns a BoxCox transformed
# data Frame for that variable
######### REQUIRES rcompanion ###################
box <- boxcox(x ~ 1, lambda = seq(-20, 20, 0.1))
print("")
cox <- data.frame(box.x, box.y)
cox2 <- cox[with(cox, order(-cox$box.y)),]
lambda <- cox2[1,"box.x"]
df_box <- (x ^ lambda - 1) / lambda
nPlot <- plotNormalHistogram(df_box)
nShapiroResults <- shapiro.test(df_box)
nList <- list("Plot" = nPlot, "Shapiro Wilk Test" = nShapiroResults)
return(nList)
}
nBoxCoc(ms$v2)
box <- boxcox(ms$V2 ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
shapiro.test(df_box)
box <- boxcox(nms$V2 ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
shapiro.test(df_box)
box <- boxcox(nms$V2 ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
shapiro.test(df_box)
nBoxCoc <- function(x){
# Takes a vector and returns a BoxCox transformed
# data Frame for that variable
######### REQUIRES rcompanion ###################
box <- boxcox(x ~ 1, lambda = seq(-20, 20, 0.1))
cox <- data.frame(box.x, box.y)
cox2 <- cox[with(cox, order(-cox$box.y)),]
lambda <- cox2[1,"box.x"]
df_box <- (x ^ lambda - 1) / lambda
nPlot <- plotNormalHistogram(df_box)
nShapiroResults <- shapiro.test(df_box)
#nList <- list("Plot" = nPlot, "Shapiro Wilk Test" = nShapiroResults)
return(nList)
}
nBoxCoc(ms$v2)
nBoxCoc(x = ms$v2)
d <- function(x){
box <- boxcox(x ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
shapiro.test(df_box)
}
d(nms$V2)
nBoxCox <- function(x){
box <- boxcox(x ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
nShapiro <- shapiro.test(df_box)
return(nShapiro)
}
d(nms$V2)
nBoxCox(ms$V2)
a <- nBoxCox(ms$V2)
a$data.name
nBoxCox <- function(x){
box <- boxcox(x ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (nms$V2 ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
nShapiro <- shapiro.test(df_box)
nList <- list("Results" = df_box, "Shapiro-Wilk Test" = nShapiro)
return(nList)
}
d(nms$V2)
a <- nBoxCox(ms$V2)
a$Results
plot(density(log(a$Results)))
plot(density(a$Results))
qqplot(density(a$Results))
qqplot(a$Results)
qqplot(a$Results, c(1:length(a$Results)))
a <- nBoxCox(ms$V2)
qqplot(a$Results, c(1:length(a$Results)))
qqline(a$Results, c(1:length(a$Results)))
a <- nBoxCox(ms$V2)
qqplot(a$Results, c(1:length(a$Results)))
qqline(a$Results)
qqplot(a$Results, c(1:length(a$Results)))
b <- data.frame(a)
b <- as.data.frame(a)
a
b <- as.data.frame(a$results)
qqplot(b)
qqplot(b[,1])
qqnorm(b)
qqnorm(b[,1])
qqnorm(b[:,1])
typeof(b)
b <- data.frame(a$results)
typeof(b)
b
b <- a$Results
b
b <- data.frame(b)
qqnorm(b)
qqnorm(b[,1])
qqline(b[,1])
a <- nBoxCox(ms$V2)
b <- a$Results
b
b <- data.frame(b)
qqnorm(b[,1])
qqline(b[,1])
v2msBox <- nBoxCox(ms$V2)
v2msBox <- nBoxCox(ms$V2)
v2msBoxTrans <- v2msBox$Results
v2msBoxTrans <- data.frame(v2msBoxTrans)
qqnorm(v2msBoxTrans[,1])
qqline(v2msBoxTrans[,1])
v2msBox <- nBoxCox(ms$V2)
v2msBoxTrans <- v2msBox$Results
v2msBoxTrans <- data.frame(v2msBoxTrans)
qqnorm(v2msBoxTrans[,1])
qqline(v2msBoxTrans[,1])
print(v2msBox$`Shapiro-Wilk Test`)
v2nmsBox <- BoxCox(nms$V2)
v2nmsBox <- nBoxCox(nms$V2)
v2nmsBoxTrans <- v2nmsBox$Results
v2nmsBoxTrans <- data.frame(v2nmsBoxTrans)
qqnrom(v2nmsBoxTrans[,1])
v2nmsBox <- nBoxCox(nms$V2)
v2nmsBoxTrans <- v2nmsBox$Results
v2nmsBoxTrans <- data.frame(v2nmsBoxTrans)
qqnorm(v2nmsBoxTrans[,1])
qqline(v2nmsBoxTrans[,1])
print(v2nmsBox$`Shapiro-Wilk Test`)
v2nmsBox <- nBoxCox(nms$V2)
v2nmsBoxTrans <- v2nmsBox$Results
v2nmsBoxTrans <- data.frame(v2nmsBoxTrans)
qqnorm(v2nmsBoxTrans[,1])
qqline(v2nmsBoxTrans[,1])
print(v2nmsBox$`Shapiro-Wilk Test`)
par(mfrow = c(2,1))
plot(density(v2msBox$Results))
lines(density(v2nmsBox$Results))
lines(density(v2nmsBox$Results))
plot(density(v2msBox$Results))
par(mfrow = c(2,1))
plot(density(v2msBox$Results))
plot(density(v2nmsBox$Results))
knitr::opts_chunk$set(echo = TRUE)
library(st514)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(st514)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(st514)
#library(tidyverse)
library(ggplot2)
library(GGally)
library(corrplot)
library(ggcorrplot)
library(MASS)
library(rcompanion)
data("T1-6")
df <- tbl
# Non-multiple-sclerosis (NMS) group data
nms <- subset(df, V6 == 0)
# Multiple-sclerosis (MS) group data
ms <- subset(df, V6 == 1)
v2msBox <- nBoxCox(ms$V2)
v2msBoxTrans <- v2msBox$Results
v2msBoxTrans <- data.frame(v2msBoxTrans)
qqnorm(v2msBoxTrans[,1])
qqline(v2msBoxTrans[,1])
print(v2msBox$`Shapiro-Wilk Test`)
v2nmsBox <- nBoxCox(nms$V2)
v2nmsBoxTrans <- v2nmsBox$Results
v2nmsBoxTrans <- data.frame(v2nmsBoxTrans)
qqnorm(v2nmsBoxTrans[,1])
qqline(v2nmsBoxTrans[,1])
print(v2nmsBox$`Shapiro-Wilk Test`)
par(mfrow = c(2,1))
plot(density(v2msBox$Results))
plot(density(v2nmsBox$Results))
nBoxCox <- function(x){
box <- boxcox(x ~1, lambda = seq(-20,20,0.1))
Cox <- data.frame(box$x, box$y)
Cox2 <- Cox[with(Cox, order(-Cox$box.y)),]
Cox2[1,]
lambda = Cox2[1,"box.x"]
df_box <- (x ^ lambda - 1)/lambda
plotNormalHistogram(df_box)
nShapiro <- shapiro.test(df_box)
nList <- list("Results" = df_box, "Shapiro-Wilk Test" = nShapiro)
return(nList)
}
v2msBox <- nBoxCox(ms$V2)
v2msBoxTrans <- v2msBox$Results
v2msBoxTrans <- data.frame(v2msBoxTrans)
qqnorm(v2msBoxTrans[,1])
qqline(v2msBoxTrans[,1])
print(v2msBox$`Shapiro-Wilk Test`)
v2nmsBox <- nBoxCox(nms$V2)
v2nmsBoxTrans <- v2nmsBox$Results
v2nmsBoxTrans <- data.frame(v2nmsBoxTrans)
qqnorm(v2nmsBoxTrans[,1])
qqline(v2nmsBoxTrans[,1])
print(v2nmsBox$`Shapiro-Wilk Test`)
par(mfrow = c(2,1))
plot(density(v2msBox$Results))
plot(density(v2nmsBox$Results))
plot(density(v2msBox$Results))
plot(density(v2nmsBox$Results))
plot(density(log(v2msBox$Results)))
plot(density(log(v2msBox$Results, exp = 2)))
plot(density(log(v2msBox$Results)))
?log
plot(density(log2(v2msBox$Results)))
plot(density(log10(v2msBox$Results)))
plot(density(log1p(v2msBox$Results)))
plot(density(logb(v2msBox$Results)))
plot(density(log2(v2msBox$Results)))
plot(density(log(v2msBox$Results)))
plot(density(log(v2msBox$Results, base = exp(1))))
plot(density(log(v2msBox$Results, base = exp(2))))
plot(density(log(v2msBox$Results, base = exp(100))))
plot(density(v2msBox$Results))
shapiro.test(ms$V2)
shapiro.test(nms$V2)
shapiro.test(ms$V2)
